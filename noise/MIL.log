pnlAddPane();
nil
1
designOpen("c:\\users\\timer\\documents\\github\\hspice\\noise\\noise.sp");
"D0"
t
pnlAddCurve(1, node(D0,"A0","onoise(nt(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(nr(r*3))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nr(r*3))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlAddCurve(1, node(D0,"A0","onoise(nf(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(ni(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(ns(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(nd(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nt(m1))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nf(m1))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(ns(m1))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nd(m1))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(ni(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(outnoise))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(nf(m1))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nf(m1))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(nf(r*3))"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(1, node(D0,"A0","onoise(nf(m1))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nf(r*3))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
updateAll();
t
updateAll();
t
updateAll();
t
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlDelCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlAddCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlAddCurve(1, node(D0,"A0","onoise(outnoise))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
updateAll();
t
updateAll();
t
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
updateAll();
t
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
updateAll();
t
updateAll();
t
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
updateAll();
t
pnlAddPane();
nil
nil
2
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
pnlAddCurve(2, node(D0,"A0","vm(idd)","S-1"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(1);
nil
pnlDelCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlDelCurve(1, node(D0,"A0","onoise(nf(m1))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
updateAll();
t
pnlDelCurve(2, node(D0,"A0","vm(idd)","S-1"), node(D0,"A0","HERTZ"));
nil
pnlAddCurve(2, node(D0,"A1","i(m1)"), node(D0,"A1","VOLTS"));
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlAddCurve(1, node(D0,"A0","onoise(innoise))"), node(D0,"A0","HERTZ"));
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(1);
nil
pnlUnselectPane(1, 0);
nil
pnlSelectPane(2);
nil
pnlUnselectPane(2, 0);
nil
pnlSelectPane(2);
nil
quit();
exit
pnlDeletePane(2, 1);
nil
nil
nil
pnlDeletePane(1, 1);
nil
nil
